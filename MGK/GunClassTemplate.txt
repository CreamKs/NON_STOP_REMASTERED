class GunNameHere : public GameObject {
private:
	glm::vec2 Position{};
	int LookDir{};
	GLfloat Rotation{};
	GLfloat RecoilPosition{};
	TimerUtil ShootingTimer;
	GLfloat ShootTime{};
	bool TriggerState{};
	SoundChannel ch{};
	GameObject* CrosshairPtr{};
	int CurrentAmmo{};

public:
	GunNameHere(GLfloat Time) {
		ShootTime = Time;
		if (auto crosshair = scene.Find("crosshair"); crosshair)
			CrosshairPtr = crosshair;
	}

	void InputPosition(glm::vec2 PositionValue) {
		Position = PositionValue;
	}

	void InputLookDir(int Dir) {
		LookDir = Dir;
	}

	void InputRotation(GLfloat Value) {
		Rotation = Value;
	}

	void InputTriggerState(bool State) {
		TriggerState = State;
	}

	void UpdateFunc(float FT) {
		if (ShootingTimer.MiliSec(2) < ShootTime)
			ShootingTimer.Update(FT);

		if (TriggerState) {
			if (ShootingTimer.MiliSec(2) >= ShootTime) {
				PlaySound(SCAR_H_Shoot, ch, 0);

				scene.AddObject(new Flame(
					Position.x + cos(glm::radians(Rotation)) * 0.35, 
					Position.y + sin(glm::radians(Rotation)) * 0.35,
					Rotation
				), "flame", LAYER_3);

				RecoilPosition = ;
				CrosshairPtr->GiveRecoil(  );
				cameraCon.AddShakeValue(  );
				CrosshairPtr->ShootGun();

				ShootingTimer.Reset();
			}
		}

		RecoilPosition = Math::Lerp(RecoilPosition, 0.0, 15, FT);
	}

	void RenderFunc() {
		InitMatrix();
		Transform::Move(TranslateMatrix, Position.x, Position.y);

		if (LookDir == 0) {
			Transform::Rotate(TranslateMatrix, Rotation + 180.0);
			Transform::Move(TranslateMatrix, -0.15 + RecoilPosition, 0.0);
			Flip(FLIP_H);
		}

		else if (LookDir == 1) {
			Transform::Rotate(TranslateMatrix, Rotation);
			Transform::Move(TranslateMatrix, 0.15 - RecoilPosition, 0.0);
		}

		Transform::Scale(ScaleMatrix, 0.36, 0.36);
		Render(SCAR_H_Image);
	}
};